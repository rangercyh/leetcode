/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void mergeLists(vector<ListNode *> &lists, int l1, int l2) {
        ListNode *p = lists[l1], *h = lists[l1];
        ListNode *q = lists[l2];
        while (p && q) {
            if (q->val < p->val) {
                if (h != p) {
                    h->next = q;
                    q = q->next;
                    h = h->next;
                    h->next = p;
                }
                else {
                    h = q;
                    q = q->next;
                    h->next = p;
                    lists[l1] = h;
                }
            }
            else {
                p = p->next;
                if (h->next != p)
                    h = h->next;
            }
        }
        if (q)
            h ? (h->next = q) : (lists[l1] = q);
    }
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        if (lists.size() == 0)
            return NULL;
        if (lists.size() == 1)
            return lists[0];
        for (size_t i = 1; i < lists.size(); i *= 2) {
            int s = 0;
            while (s + i < lists.size()) {
                mergeLists(lists, s, s + i);
                s += i * 2;
            }
        }
        return lists[0];
    }
};
